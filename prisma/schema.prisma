generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

model Match {
  id            Int     @id @default(autoincrement())
  match_id      BigInt
  account_id    BigInt
  assists       Int
  average_rank  Int?
  deaths        Int
  duration      Int
  game_mode     Int
  hero_id       Int
  kills         Int
  leaver_status Int
  lobby_type    Int
  party_size    Int?
  player_slot   Int
  radiant_win   Boolean
  skill         Int?
  start_time    BigInt
  version       Int?
  //user          User?   @relation(fields: [account_id], references: [account_id])

  @@unique([match_id, account_id], name: "matchPlusAccount")
}

model DotaUser {
  account_id  BigInt    @id @unique
  lastUpdated DateTime
  oldestMatch DateTime?
  newestMatch DateTime?

  @@index([account_id])
}

model Hero {
  id             Int    @id @unique
  name           String
  localized_name String
  primary_attr   String
  attack_type    String
  roles          String
  legs           Int
}

model User {
  id           String    @id @unique
  name         String?
  username     String    @unique
  account_id   Int?      @unique
  steam_id     BigInt?   @unique
  profile_url  String
  avatar_url   String
  key          Key[]
  auth_session Session[]
  randoms      Random[]
  //matches      Match[]
}

model Random {
  id              Int      @id @default(autoincrement())
  account_id      Int
  active          Boolean
  status          String
  date            DateTime
  endDate         DateTime?
  endMatchID      Int?
  availableHeroes String
  bannedHeroes    String?
  selectedRoles   String?
  expectedGold    Int
  modifierAmount  Int
  modifierTotal   Int
  randomedHero    Int
  user            User?    @relation(fields: [account_id], references: [account_id])

  //@@unique([account_id, active], name: "matchPlusAccount")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  // primary_key     Boolean
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
