generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

// user models
model User {
  id           String      @id @unique
  name         String?
  username     String      @unique
  account_id   Int         @unique
  steam_id     BigInt?     @unique
  profile_url  String?
  avatar_url   String?
  roles        String?
  createdDate  DateTime   @default(now())
  lastUpdated  DateTime    @default(now())
  key          Key[]
  auth_session Session[]
  randoms      Random[]
  user_prefs   UserPrefs[]
  leagues      League[]
  //player_match_details PlayersMatchDetail[]
  dota_user    DotaUser?   @relation(fields: [account_id], references: [account_id])

  //matches      Match[]
  Turbotown Turbotown[]
}

model UserPrefs {
  id         Int    @id @default(autoincrement())
  account_id Int
  name       String
  value      String
  user       User?  @relation(fields: [account_id], references: [account_id])

  @@unique([account_id, name], name: "userPlusName")
}

model DotaUser {
  account_id    Int             @id @unique
  lastUpdated   DateTime
  createdDate   DateTime @default(now())
  oldestMatch   DateTime?
  newestMatch   DateTime?
  oldestMatchID BigInt?
  newestMatchID BigInt?
  leagues       League[]
  seasons       Season[]
  user          User?
  FriendshipMMR FriendshipMMR[]

  @@index([account_id])
}

//match models
model Match {
  id            Int      @id @default(autoincrement())
  match_id      BigInt
  account_id    Int
  assists       Int
  average_rank  Int?
  deaths        Int
  duration      Int
  game_mode     Int
  hero_id       Int
  kills         Int
  leaver_status Int?
  lobby_type    Int?
  party_size    Int?
  player_slot   Int
  radiant_win   Boolean
  skill         Int?
  start_time    BigInt
  version       Int?
  randoms       Random[]
  //user          User?   @relation(fields: [account_id], references: [account_id])

  @@unique([match_id, account_id], name: "matchPlusAccount")
}

model MatchDetail {
  match_id                BigInt               @id @unique
  radiant_win             Boolean
  duration                Int
  pre_game_duration       Int
  start_time              BigInt
  tower_status_radiant    Int
  tower_status_dire       Int
  barracks_status_radiant Int
  barracks_status_dire    Int
  first_blood_time        Int
  patch                   Int
  radiant_score           Int
  dire_score              Int
  average_rank            Int?
  players                 PlayersMatchDetail[]
  FriendshipMMR           FriendshipMMR[]
}

model PlayersMatchDetail {
  id               Int          @id @default(autoincrement())
  match_id         BigInt
  account_id       Int
  player_slot      Int
  hero_id          Int
  item_0           Int
  item_1           Int
  item_2           Int
  item_3           Int
  item_4           Int
  item_5           Int
  backpack_0       Int
  backpack_1       Int
  backpack_2       Int
  item_neutral     Int
  kills            Int
  deaths           Int
  assists          Int
  last_hits        Int
  denies           Int
  gold_per_min     Int
  xp_per_min       Int
  level            Int
  net_worth        Int
  aghanims_scepter Int
  aghanims_shard   Int
  moonshard        Int
  hero_damage      Int?
  tower_damage     Int?
  hero_healing     Int?
  gold             Int?
  gold_spent       Int?
  win              Boolean
  lose             Boolean
  total_gold       Int
  total_xp         Int
  kda              Float
  benchmarks       String
  match_detail     MatchDetail? @relation(fields: [match_id], references: [match_id])
  //user             User?        @relation(fields: [account_id], references: [account_id])

  @@unique([match_id, account_id], name: "matchPlusAccount")
}

//league and season models
model League {
  id          Int        @id @default(autoincrement())
  name        String
  lastUpdated DateTime   @default(now())
  createdDate DateTime   @default(now())
  creatorID   Int
  creator     User       @relation(fields: [creatorID], references: [account_id])
  members     DotaUser[]
  seasons     Season[]
}

model Season {
  id             Int            @id @default(autoincrement())
  name           String
  active         Boolean        @default(true)
  lastUpdated    DateTime       @default(now())
  startDate      DateTime
  endDate        DateTime
  type           String
  creatorID      Int
  leagueID       Int
  randoms        Random[]
  league         League         @relation(fields: [leagueID], references: [id])
  members        DotaUser[]
  season_results SeasonResult[]
  turbotowns     Turbotown[]
}

model SeasonResult {
  id         Int    @id @default(autoincrement())
  seasonID   Int
  account_id Int
  place      Int
  score      Int
  season     Season @relation(fields: [seasonID], references: [id])
}

model Random {
  id              Int              @id @default(autoincrement())
  account_id      Int
  active          Boolean
  status          String
  date            DateTime
  win             Boolean?
  endDate         DateTime?
  endMatchID      Int?
  endGold         Int?
  availableHeroes String
  bannedHeroes    String?
  selectedRoles   String?
  expectedGold    Int
  modifierAmount  Int
  modifierTotal   Int
  randomedHero    Int
  seasons         Season[]
  quests          TurbotownQuest[]
  user            User?            @relation(fields: [account_id], references: [account_id])
  match           Match?           @relation(fields: [endMatchID], references: [id])

  //@@unique([account_id, active], name: "matchPlusAccount")
}

//turbotown models
model Turbotown {
  id          Int               @id @default(autoincrement())
  account_id  Int               @unique
  seasonID    Int
  lastUpdated DateTime          @default(now())
  createdDate DateTime
  user        User?             @relation(fields: [account_id], references: [account_id])
  metrics     TurbotownMetric[]
  quests      TurbotownQuest[]
  season      Season?           @relation(fields: [seasonID], references: [id])
  items       TurbotownItem[]
  statuses    TurbotownStatus[]
}

model TurbotownMetric {
  id          Int      @id @default(autoincrement())
  turbotownID Int
  lastUpdated DateTime @default(now())
  label       String
  value       Int

  Turbotown Turbotown @relation(fields: [turbotownID], references: [id])

  @@unique([turbotownID, label], name: "townPlusLabel")
}

model TurbotownQuest {
  id          Int       @id @default(autoincrement())
  active      Boolean
  status      String
  xp          Int
  gold        Int
  endXp       Int?
  endGold     Int?
  questSlot   Int
  type        String
  endDate     DateTime?
  lastUpdated DateTime  @default(now())
  createdDate DateTime
  randomID    Int
  turbotownID Int
  random      Random    @relation(fields: [randomID], references: [id], onDelete: Cascade)
  Turbotown   Turbotown @relation(fields: [turbotownID], references: [id])
}

model TurbotownItem {
  id          Int       @id @default(autoincrement())
  lastUpdated DateTime  @default(now())
  turbotownID Int
  itemID      Int
  turbotown   Turbotown @relation(fields: [turbotownID], references: [id])
  item        Item      @relation(fields: [itemID], references: [id])
  status      String
}

model TurbotownStatus {
  id           Int       @id @default(autoincrement())
  lastUpdated  DateTime  @default(now())
  name         String
  value        String
  isActive     Boolean
  appliedDate  DateTime
  resolvedDate DateTime?
  turbotownID  Int
  turbotown    Turbotown @relation(fields: [turbotownID], references: [id])

  @@unique([turbotownID, name, isActive], name: "townPlusNamePlusActive")
}

model Item {
  id                Int             @id @default(autoincrement())
  name              String
  description       String
  imgSrc            String
  goldCost          Int
  quantityAvailable Int
  active            Boolean
  TurbotownItem     TurbotownItem[]
}

model TurbotownAction {
  id     Int    @id @default(autoincrement())
  action String
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  // primary_key     Boolean
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Hero {
  id             Int    @id @unique
  name           String
  localized_name String
  primary_attr   String
  attack_type    String
  roles          String
  legs           Int?
}

model FriendshipMMR {
  id          Int         @id @default(autoincrement())
  match_id    BigInt
  account_id  Int
  start_time  DateTime
  win         Boolean
  mmrModifier Float
  match       MatchDetail @relation(fields: [match_id], references: [match_id])
  dota_user   DotaUser    @relation(fields: [account_id], references: [account_id])

  @@unique([match_id, account_id], name: "matchPlusAccount")
}
